//
//  PickUpInteractor.swift
//  Pomelo
//
//  Created by anupong dorkkunm on 26/8/2563 BE.
//  Copyright (c) 2563 anupong dorkkunm. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation


protocol PickUpBusinessLogic
{
  func doSomething(request: PickUpModel.Something.Request)
  func getData()
  func getDataLoaded() -> [Pickup]
  func setUpdateLocation(location:CLLocation)
 
    
}

protocol PickUpDataStore
{
  //var name: String { get set }
}

class PickUpInteractor: PickUpBusinessLogic, PickUpDataStore
{
  var presenter: PickUpPresentationLogic?
  var worker: PickUpWorker?
  //var name: String = ""
    
  var mainPickupData:PickupData?
  var location:CLLocation?
  
  // MARK: Do something
  
  func doSomething(request: PickUpModel.Something.Request)
  {
    worker = PickUpWorker()
    worker?.doSomeWork()

    let response = PickUpModel.Something.Response()
    presenter?.presentSomething(response: response)
  }
    
    func getData()  {
        worker = PickUpWorker()
        worker?.loadPickupData(completionHandler: {[weak self] (data, err) in
            if data != nil {
                self?.mainPickupData = data
                self?.presenter?.presentPickupData(data: data!)
                self?.filterEmptyAliasData()
                self?.addDistanceToPickup()
            }else if err != nil {
                self?.presenter?.presentError(error: err!)
            }
               
            
        })
    }
    
    func getDataLoaded() -> [Pickup] {
        
        return mainPickupData?.pickup?.filter{$0.active == true && $0.alias != "" } ?? [Pickup]()
    }
    
    func filterEmptyAliasData() {
        mainPickupData?.pickup = mainPickupData?.pickup?.filter{$0.active == true && $0.alias != "" } ?? [Pickup]()
    
    }
    
    
    func sortByDistance() {
        
       guard mainPickupData != nil else {return}
        
       mainPickupData?.pickup = mainPickupData?.pickup?.sorted(by: { $0.distance < $1.distance })
       self.presenter?.presentPickupData(data: mainPickupData!)
        
    }
    
    func addDistanceToPickup() {
       
        guard location != nil else {return}
        mainPickupData?.pickup = mainPickupData?.pickup?.map{
            let shopLocate = CLLocation(latitude: $0.latitude ?? 0, longitude: $0.longitude ?? 0)
            let distanceKiloMeters = (shopLocate.distance(from: location!))/1000
            $0.distance = distanceKiloMeters.roundToDecimal(2)
            return $0
        }
        
        sortByDistance()
    }
    
  
    
    func setUpdateLocation(location updatedLocation:CLLocation) {
        location = updatedLocation
        addDistanceToPickup()
    }
    
    
}
